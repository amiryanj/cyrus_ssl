// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssl_analyzer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ssl_analyzer_packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssl_analyzer_packet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ssl_5fanalyzer_2eproto() {
  protobuf_AddDesc_ssl_5fanalyzer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ssl_analyzer.proto");
  GOOGLE_CHECK(file != NULL);
  ssl_analyzer_packet_descriptor_ = file->message_type(0);
  static const int ssl_analyzer_packet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_analyzer_packet, nearest_blue_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_analyzer_packet, nearest_yellow_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_analyzer_packet, access_time_blue_vec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_analyzer_packet, access_time_yellow_vec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_analyzer_packet, comment_),
  };
  ssl_analyzer_packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssl_analyzer_packet_descriptor_,
      ssl_analyzer_packet::default_instance_,
      ssl_analyzer_packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_analyzer_packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_analyzer_packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssl_analyzer_packet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ssl_5fanalyzer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssl_analyzer_packet_descriptor_, &ssl_analyzer_packet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ssl_5fanalyzer_2eproto() {
  delete ssl_analyzer_packet::default_instance_;
  delete ssl_analyzer_packet_reflection_;
}

void protobuf_AddDesc_ssl_5fanalyzer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ssl_analyzer.proto\"\230\001\n\023ssl_analyzer_pa"
    "cket\022\027\n\017nearest_blue_id\030\001 \002(\r\022\031\n\021nearest"
    "_yellow_id\030\002 \002(\r\022\034\n\024access_time_blue_vec"
    "\030\003 \003(\001\022\036\n\026access_time_yellow_vec\030\004 \003(\001\022\017"
    "\n\007comment\030\005 \001(\t", 175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_analyzer.proto", &protobuf_RegisterTypes);
  ssl_analyzer_packet::default_instance_ = new ssl_analyzer_packet();
  ssl_analyzer_packet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ssl_5fanalyzer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ssl_5fanalyzer_2eproto {
  StaticDescriptorInitializer_ssl_5fanalyzer_2eproto() {
    protobuf_AddDesc_ssl_5fanalyzer_2eproto();
  }
} static_descriptor_initializer_ssl_5fanalyzer_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ssl_analyzer_packet::kNearestBlueIdFieldNumber;
const int ssl_analyzer_packet::kNearestYellowIdFieldNumber;
const int ssl_analyzer_packet::kAccessTimeBlueVecFieldNumber;
const int ssl_analyzer_packet::kAccessTimeYellowVecFieldNumber;
const int ssl_analyzer_packet::kCommentFieldNumber;
#endif  // !_MSC_VER

ssl_analyzer_packet::ssl_analyzer_packet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssl_analyzer_packet::InitAsDefaultInstance() {
}

ssl_analyzer_packet::ssl_analyzer_packet(const ssl_analyzer_packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssl_analyzer_packet::SharedCtor() {
  _cached_size_ = 0;
  nearest_blue_id_ = 0u;
  nearest_yellow_id_ = 0u;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssl_analyzer_packet::~ssl_analyzer_packet() {
  SharedDtor();
}

void ssl_analyzer_packet::SharedDtor() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void ssl_analyzer_packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssl_analyzer_packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssl_analyzer_packet_descriptor_;
}

const ssl_analyzer_packet& ssl_analyzer_packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fanalyzer_2eproto();  return *default_instance_;
}

ssl_analyzer_packet* ssl_analyzer_packet::default_instance_ = NULL;

ssl_analyzer_packet* ssl_analyzer_packet::New() const {
  return new ssl_analyzer_packet;
}

void ssl_analyzer_packet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nearest_blue_id_ = 0u;
    nearest_yellow_id_ = 0u;
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  access_time_blue_vec_.Clear();
  access_time_yellow_vec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssl_analyzer_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nearest_blue_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nearest_blue_id_)));
          set_has_nearest_blue_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nearest_yellow_id;
        break;
      }
      
      // required uint32 nearest_yellow_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nearest_yellow_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nearest_yellow_id_)));
          set_has_nearest_yellow_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_access_time_blue_vec;
        break;
      }
      
      // repeated double access_time_blue_vec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_access_time_blue_vec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_access_time_blue_vec())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_access_time_blue_vec())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_access_time_blue_vec;
        if (input->ExpectTag(33)) goto parse_access_time_yellow_vec;
        break;
      }
      
      // repeated double access_time_yellow_vec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_access_time_yellow_vec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_access_time_yellow_vec())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_access_time_yellow_vec())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_access_time_yellow_vec;
        if (input->ExpectTag(42)) goto parse_comment;
        break;
      }
      
      // optional string comment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssl_analyzer_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 nearest_blue_id = 1;
  if (has_nearest_blue_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nearest_blue_id(), output);
  }
  
  // required uint32 nearest_yellow_id = 2;
  if (has_nearest_yellow_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nearest_yellow_id(), output);
  }
  
  // repeated double access_time_blue_vec = 3;
  for (int i = 0; i < this->access_time_blue_vec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->access_time_blue_vec(i), output);
  }
  
  // repeated double access_time_yellow_vec = 4;
  for (int i = 0; i < this->access_time_yellow_vec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->access_time_yellow_vec(i), output);
  }
  
  // optional string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->comment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssl_analyzer_packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 nearest_blue_id = 1;
  if (has_nearest_blue_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nearest_blue_id(), target);
  }
  
  // required uint32 nearest_yellow_id = 2;
  if (has_nearest_yellow_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nearest_yellow_id(), target);
  }
  
  // repeated double access_time_blue_vec = 3;
  for (int i = 0; i < this->access_time_blue_vec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->access_time_blue_vec(i), target);
  }
  
  // repeated double access_time_yellow_vec = 4;
  for (int i = 0; i < this->access_time_yellow_vec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->access_time_yellow_vec(i), target);
  }
  
  // optional string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssl_analyzer_packet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 nearest_blue_id = 1;
    if (has_nearest_blue_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nearest_blue_id());
    }
    
    // required uint32 nearest_yellow_id = 2;
    if (has_nearest_yellow_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nearest_yellow_id());
    }
    
    // optional string comment = 5;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
  }
  // repeated double access_time_blue_vec = 3;
  {
    int data_size = 0;
    data_size = 8 * this->access_time_blue_vec_size();
    total_size += 1 * this->access_time_blue_vec_size() + data_size;
  }
  
  // repeated double access_time_yellow_vec = 4;
  {
    int data_size = 0;
    data_size = 8 * this->access_time_yellow_vec_size();
    total_size += 1 * this->access_time_yellow_vec_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssl_analyzer_packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssl_analyzer_packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssl_analyzer_packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssl_analyzer_packet::MergeFrom(const ssl_analyzer_packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  access_time_blue_vec_.MergeFrom(from.access_time_blue_vec_);
  access_time_yellow_vec_.MergeFrom(from.access_time_yellow_vec_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nearest_blue_id()) {
      set_nearest_blue_id(from.nearest_blue_id());
    }
    if (from.has_nearest_yellow_id()) {
      set_nearest_yellow_id(from.nearest_yellow_id());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssl_analyzer_packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssl_analyzer_packet::CopyFrom(const ssl_analyzer_packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssl_analyzer_packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ssl_analyzer_packet::Swap(ssl_analyzer_packet* other) {
  if (other != this) {
    std::swap(nearest_blue_id_, other->nearest_blue_id_);
    std::swap(nearest_yellow_id_, other->nearest_yellow_id_);
    access_time_blue_vec_.Swap(&other->access_time_blue_vec_);
    access_time_yellow_vec_.Swap(&other->access_time_yellow_vec_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssl_analyzer_packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssl_analyzer_packet_descriptor_;
  metadata.reflection = ssl_analyzer_packet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
