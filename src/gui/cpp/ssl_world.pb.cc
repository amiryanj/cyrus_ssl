// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssl_world.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* vector_3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vector_3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssl_ball_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssl_ball_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssl_robot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssl_robot_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssl_team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssl_team_reflection_ = NULL;
const ::google::protobuf::Descriptor* ssl_world_packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ssl_world_packet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SideType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ColorType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ssl_5fworld_2eproto() {
  protobuf_AddDesc_ssl_5fworld_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ssl_world.proto");
  GOOGLE_CHECK(file != NULL);
  vector_3d_descriptor_ = file->message_type(0);
  static const int vector_3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vector_3d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vector_3d, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vector_3d, teta_),
  };
  vector_3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vector_3d_descriptor_,
      vector_3d::default_instance_,
      vector_3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vector_3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vector_3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vector_3d));
  ssl_ball_descriptor_ = file->message_type(1);
  static const int ssl_ball_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_ball, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_ball, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_ball, velecity_),
  };
  ssl_ball_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssl_ball_descriptor_,
      ssl_ball::default_instance_,
      ssl_ball_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_ball, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_ball, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssl_ball));
  ssl_robot_descriptor_ = file->message_type(2);
  static const int ssl_robot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_robot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_robot, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_robot, velecity_),
  };
  ssl_robot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssl_robot_descriptor_,
      ssl_robot::default_instance_,
      ssl_robot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_robot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_robot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssl_robot));
  ssl_team_descriptor_ = file->message_type(3);
  static const int ssl_team_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_team, robots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_team, side_),
  };
  ssl_team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssl_team_descriptor_,
      ssl_team::default_instance_,
      ssl_team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssl_team));
  ssl_world_packet_descriptor_ = file->message_type(4);
  static const int ssl_world_packet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet, field_balls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet, blue_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet, yellow_team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet, comment_),
  };
  ssl_world_packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ssl_world_packet_descriptor_,
      ssl_world_packet::default_instance_,
      ssl_world_packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ssl_world_packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ssl_world_packet));
  SideType_descriptor_ = file->enum_type(0);
  ColorType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ssl_5fworld_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vector_3d_descriptor_, &vector_3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssl_ball_descriptor_, &ssl_ball::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssl_robot_descriptor_, &ssl_robot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssl_team_descriptor_, &ssl_team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ssl_world_packet_descriptor_, &ssl_world_packet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ssl_5fworld_2eproto() {
  delete vector_3d::default_instance_;
  delete vector_3d_reflection_;
  delete ssl_ball::default_instance_;
  delete ssl_ball_reflection_;
  delete ssl_robot::default_instance_;
  delete ssl_robot_reflection_;
  delete ssl_team::default_instance_;
  delete ssl_team_reflection_;
  delete ssl_world_packet::default_instance_;
  delete ssl_world_packet_reflection_;
}

void protobuf_AddDesc_ssl_5fworld_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ssl_world.proto\"/\n\tvector_3d\022\t\n\001x\030\001 \002("
    "\002\022\t\n\001y\030\002 \002(\002\022\014\n\004teta\030\003 \002(\002\"R\n\010ssl_ball\022\n"
    "\n\002id\030\001 \002(\r\022\034\n\010position\030\002 \002(\0132\n.vector_3d"
    "\022\034\n\010velecity\030\003 \002(\0132\n.vector_3d\"S\n\tssl_ro"
    "bot\022\n\n\002id\030\001 \002(\r\022\034\n\010position\030\002 \002(\0132\n.vect"
    "or_3d\022\034\n\010velecity\030\003 \002(\0132\n.vector_3d\"\?\n\010s"
    "sl_team\022\032\n\006robots\030\001 \003(\0132\n.ssl_robot\022\027\n\004s"
    "ide\030\002 \002(\0162\t.SideType\"\201\001\n\020ssl_world_packe"
    "t\022\036\n\013field_balls\030\001 \003(\0132\t.ssl_ball\022\034\n\tblu"
    "e_team\030\002 \002(\0132\t.ssl_team\022\036\n\013yellow_team\030\003"
    " \002(\0132\t.ssl_team\022\017\n\007comment\030\004 \001(\t*)\n\010Side"
    "Type\022\r\n\tleft_side\020\000\022\016\n\nright_side\020\001*-\n\tC"
    "olorType\022\016\n\nblue_color\020\000\022\020\n\014yellow_color"
    "\020\001", 522);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_world.proto", &protobuf_RegisterTypes);
  vector_3d::default_instance_ = new vector_3d();
  ssl_ball::default_instance_ = new ssl_ball();
  ssl_robot::default_instance_ = new ssl_robot();
  ssl_team::default_instance_ = new ssl_team();
  ssl_world_packet::default_instance_ = new ssl_world_packet();
  vector_3d::default_instance_->InitAsDefaultInstance();
  ssl_ball::default_instance_->InitAsDefaultInstance();
  ssl_robot::default_instance_->InitAsDefaultInstance();
  ssl_team::default_instance_->InitAsDefaultInstance();
  ssl_world_packet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ssl_5fworld_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ssl_5fworld_2eproto {
  StaticDescriptorInitializer_ssl_5fworld_2eproto() {
    protobuf_AddDesc_ssl_5fworld_2eproto();
  }
} static_descriptor_initializer_ssl_5fworld_2eproto_;

const ::google::protobuf::EnumDescriptor* SideType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SideType_descriptor_;
}
bool SideType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ColorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColorType_descriptor_;
}
bool ColorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int vector_3d::kXFieldNumber;
const int vector_3d::kYFieldNumber;
const int vector_3d::kTetaFieldNumber;
#endif  // !_MSC_VER

vector_3d::vector_3d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vector_3d::InitAsDefaultInstance() {
}

vector_3d::vector_3d(const vector_3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vector_3d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  teta_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vector_3d::~vector_3d() {
  SharedDtor();
}

void vector_3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vector_3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vector_3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vector_3d_descriptor_;
}

const vector_3d& vector_3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fworld_2eproto();  return *default_instance_;
}

vector_3d* vector_3d::default_instance_ = NULL;

vector_3d* vector_3d::New() const {
  return new vector_3d;
}

void vector_3d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    teta_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vector_3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_teta;
        break;
      }
      
      // required float teta = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_teta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &teta_)));
          set_has_teta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vector_3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float teta = 3;
  if (has_teta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->teta(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vector_3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float teta = 3;
  if (has_teta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->teta(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vector_3d::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float teta = 3;
    if (has_teta()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vector_3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vector_3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vector_3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vector_3d::MergeFrom(const vector_3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_teta()) {
      set_teta(from.teta());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vector_3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vector_3d::CopyFrom(const vector_3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vector_3d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void vector_3d::Swap(vector_3d* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(teta_, other->teta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vector_3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vector_3d_descriptor_;
  metadata.reflection = vector_3d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ssl_ball::kIdFieldNumber;
const int ssl_ball::kPositionFieldNumber;
const int ssl_ball::kVelecityFieldNumber;
#endif  // !_MSC_VER

ssl_ball::ssl_ball()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssl_ball::InitAsDefaultInstance() {
  position_ = const_cast< ::vector_3d*>(&::vector_3d::default_instance());
  velecity_ = const_cast< ::vector_3d*>(&::vector_3d::default_instance());
}

ssl_ball::ssl_ball(const ssl_ball& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssl_ball::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  position_ = NULL;
  velecity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssl_ball::~ssl_ball() {
  SharedDtor();
}

void ssl_ball::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete velecity_;
  }
}

void ssl_ball::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssl_ball::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssl_ball_descriptor_;
}

const ssl_ball& ssl_ball::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fworld_2eproto();  return *default_instance_;
}

ssl_ball* ssl_ball::default_instance_ = NULL;

ssl_ball* ssl_ball::New() const {
  return new ssl_ball;
}

void ssl_ball::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_position()) {
      if (position_ != NULL) position_->::vector_3d::Clear();
    }
    if (has_velecity()) {
      if (velecity_ != NULL) velecity_->::vector_3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssl_ball::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // required .vector_3d position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_velecity;
        break;
      }
      
      // required .vector_3d velecity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velecity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velecity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssl_ball::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .vector_3d position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }
  
  // required .vector_3d velecity = 3;
  if (has_velecity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->velecity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssl_ball::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .vector_3d position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  // required .vector_3d velecity = 3;
  if (has_velecity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->velecity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssl_ball::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .vector_3d position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // required .vector_3d velecity = 3;
    if (has_velecity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velecity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssl_ball::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssl_ball* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssl_ball*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssl_ball::MergeFrom(const ssl_ball& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      mutable_position()->::vector_3d::MergeFrom(from.position());
    }
    if (from.has_velecity()) {
      mutable_velecity()->::vector_3d::MergeFrom(from.velecity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssl_ball::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssl_ball::CopyFrom(const ssl_ball& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssl_ball::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velecity()) {
    if (!this->velecity().IsInitialized()) return false;
  }
  return true;
}

void ssl_ball::Swap(ssl_ball* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(velecity_, other->velecity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssl_ball::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssl_ball_descriptor_;
  metadata.reflection = ssl_ball_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ssl_robot::kIdFieldNumber;
const int ssl_robot::kPositionFieldNumber;
const int ssl_robot::kVelecityFieldNumber;
#endif  // !_MSC_VER

ssl_robot::ssl_robot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssl_robot::InitAsDefaultInstance() {
  position_ = const_cast< ::vector_3d*>(&::vector_3d::default_instance());
  velecity_ = const_cast< ::vector_3d*>(&::vector_3d::default_instance());
}

ssl_robot::ssl_robot(const ssl_robot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssl_robot::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  position_ = NULL;
  velecity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssl_robot::~ssl_robot() {
  SharedDtor();
}

void ssl_robot::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete velecity_;
  }
}

void ssl_robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssl_robot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssl_robot_descriptor_;
}

const ssl_robot& ssl_robot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fworld_2eproto();  return *default_instance_;
}

ssl_robot* ssl_robot::default_instance_ = NULL;

ssl_robot* ssl_robot::New() const {
  return new ssl_robot;
}

void ssl_robot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_position()) {
      if (position_ != NULL) position_->::vector_3d::Clear();
    }
    if (has_velecity()) {
      if (velecity_ != NULL) velecity_->::vector_3d::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssl_robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // required .vector_3d position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_velecity;
        break;
      }
      
      // required .vector_3d velecity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velecity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velecity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssl_robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required .vector_3d position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }
  
  // required .vector_3d velecity = 3;
  if (has_velecity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->velecity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssl_robot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required .vector_3d position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  // required .vector_3d velecity = 3;
  if (has_velecity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->velecity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssl_robot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required .vector_3d position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // required .vector_3d velecity = 3;
    if (has_velecity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velecity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssl_robot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssl_robot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssl_robot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssl_robot::MergeFrom(const ssl_robot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      mutable_position()->::vector_3d::MergeFrom(from.position());
    }
    if (from.has_velecity()) {
      mutable_velecity()->::vector_3d::MergeFrom(from.velecity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssl_robot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssl_robot::CopyFrom(const ssl_robot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssl_robot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velecity()) {
    if (!this->velecity().IsInitialized()) return false;
  }
  return true;
}

void ssl_robot::Swap(ssl_robot* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(velecity_, other->velecity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssl_robot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssl_robot_descriptor_;
  metadata.reflection = ssl_robot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ssl_team::kRobotsFieldNumber;
const int ssl_team::kSideFieldNumber;
#endif  // !_MSC_VER

ssl_team::ssl_team()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssl_team::InitAsDefaultInstance() {
}

ssl_team::ssl_team(const ssl_team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssl_team::SharedCtor() {
  _cached_size_ = 0;
  side_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssl_team::~ssl_team() {
  SharedDtor();
}

void ssl_team::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ssl_team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssl_team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssl_team_descriptor_;
}

const ssl_team& ssl_team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fworld_2eproto();  return *default_instance_;
}

ssl_team* ssl_team::default_instance_ = NULL;

ssl_team* ssl_team::New() const {
  return new ssl_team;
}

void ssl_team::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    side_ = 0;
  }
  robots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssl_team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ssl_robot robots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_robots;
        if (input->ExpectTag(16)) goto parse_side;
        break;
      }
      
      // required .SideType side = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (SideType_IsValid(value)) {
            set_side(static_cast< SideType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssl_team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ssl_robot robots = 1;
  for (int i = 0; i < this->robots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->robots(i), output);
  }
  
  // required .SideType side = 2;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->side(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssl_team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ssl_robot robots = 1;
  for (int i = 0; i < this->robots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->robots(i), target);
  }
  
  // required .SideType side = 2;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->side(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssl_team::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .SideType side = 2;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }
    
  }
  // repeated .ssl_robot robots = 1;
  total_size += 1 * this->robots_size();
  for (int i = 0; i < this->robots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssl_team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssl_team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssl_team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssl_team::MergeFrom(const ssl_team& from) {
  GOOGLE_CHECK_NE(&from, this);
  robots_.MergeFrom(from.robots_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_side()) {
      set_side(from.side());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssl_team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssl_team::CopyFrom(const ssl_team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssl_team::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < robots_size(); i++) {
    if (!this->robots(i).IsInitialized()) return false;
  }
  return true;
}

void ssl_team::Swap(ssl_team* other) {
  if (other != this) {
    robots_.Swap(&other->robots_);
    std::swap(side_, other->side_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssl_team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssl_team_descriptor_;
  metadata.reflection = ssl_team_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ssl_world_packet::kFieldBallsFieldNumber;
const int ssl_world_packet::kBlueTeamFieldNumber;
const int ssl_world_packet::kYellowTeamFieldNumber;
const int ssl_world_packet::kCommentFieldNumber;
#endif  // !_MSC_VER

ssl_world_packet::ssl_world_packet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ssl_world_packet::InitAsDefaultInstance() {
  blue_team_ = const_cast< ::ssl_team*>(&::ssl_team::default_instance());
  yellow_team_ = const_cast< ::ssl_team*>(&::ssl_team::default_instance());
}

ssl_world_packet::ssl_world_packet(const ssl_world_packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ssl_world_packet::SharedCtor() {
  _cached_size_ = 0;
  blue_team_ = NULL;
  yellow_team_ = NULL;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ssl_world_packet::~ssl_world_packet() {
  SharedDtor();
}

void ssl_world_packet::SharedDtor() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
    delete blue_team_;
    delete yellow_team_;
  }
}

void ssl_world_packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ssl_world_packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ssl_world_packet_descriptor_;
}

const ssl_world_packet& ssl_world_packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssl_5fworld_2eproto();  return *default_instance_;
}

ssl_world_packet* ssl_world_packet::default_instance_ = NULL;

ssl_world_packet* ssl_world_packet::New() const {
  return new ssl_world_packet;
}

void ssl_world_packet::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_blue_team()) {
      if (blue_team_ != NULL) blue_team_->::ssl_team::Clear();
    }
    if (has_yellow_team()) {
      if (yellow_team_ != NULL) yellow_team_->::ssl_team::Clear();
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  field_balls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ssl_world_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ssl_ball field_balls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_balls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field_balls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_field_balls;
        if (input->ExpectTag(18)) goto parse_blue_team;
        break;
      }
      
      // required .ssl_team blue_team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blue_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_yellow_team;
        break;
      }
      
      // required .ssl_team yellow_team = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yellow_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yellow_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_comment;
        break;
      }
      
      // optional string comment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ssl_world_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ssl_ball field_balls = 1;
  for (int i = 0; i < this->field_balls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field_balls(i), output);
  }
  
  // required .ssl_team blue_team = 2;
  if (has_blue_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blue_team(), output);
  }
  
  // required .ssl_team yellow_team = 3;
  if (has_yellow_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->yellow_team(), output);
  }
  
  // optional string comment = 4;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->comment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ssl_world_packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ssl_ball field_balls = 1;
  for (int i = 0; i < this->field_balls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->field_balls(i), target);
  }
  
  // required .ssl_team blue_team = 2;
  if (has_blue_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blue_team(), target);
  }
  
  // required .ssl_team yellow_team = 3;
  if (has_yellow_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->yellow_team(), target);
  }
  
  // optional string comment = 4;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->comment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ssl_world_packet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .ssl_team blue_team = 2;
    if (has_blue_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blue_team());
    }
    
    // required .ssl_team yellow_team = 3;
    if (has_yellow_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yellow_team());
    }
    
    // optional string comment = 4;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
  }
  // repeated .ssl_ball field_balls = 1;
  total_size += 1 * this->field_balls_size();
  for (int i = 0; i < this->field_balls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field_balls(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ssl_world_packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ssl_world_packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ssl_world_packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ssl_world_packet::MergeFrom(const ssl_world_packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  field_balls_.MergeFrom(from.field_balls_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_blue_team()) {
      mutable_blue_team()->::ssl_team::MergeFrom(from.blue_team());
    }
    if (from.has_yellow_team()) {
      mutable_yellow_team()->::ssl_team::MergeFrom(from.yellow_team());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ssl_world_packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ssl_world_packet::CopyFrom(const ssl_world_packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ssl_world_packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  for (int i = 0; i < field_balls_size(); i++) {
    if (!this->field_balls(i).IsInitialized()) return false;
  }
  if (has_blue_team()) {
    if (!this->blue_team().IsInitialized()) return false;
  }
  if (has_yellow_team()) {
    if (!this->yellow_team().IsInitialized()) return false;
  }
  return true;
}

void ssl_world_packet::Swap(ssl_world_packet* other) {
  if (other != this) {
    field_balls_.Swap(&other->field_balls_);
    std::swap(blue_team_, other->blue_team_);
    std::swap(yellow_team_, other->yellow_team_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ssl_world_packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ssl_world_packet_descriptor_;
  metadata.reflection = ssl_world_packet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
