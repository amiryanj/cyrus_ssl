// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_world.proto

#ifndef PROTOBUF_ssl_5fworld_2eproto__INCLUDED
#define PROTOBUF_ssl_5fworld_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ssl_5fworld_2eproto();
void protobuf_AssignDesc_ssl_5fworld_2eproto();
void protobuf_ShutdownFile_ssl_5fworld_2eproto();

class vector_3d;
class ssl_ball;
class ssl_robot;
class ssl_team;
class ssl_world_packet;

enum SideType {
  left_side = 0,
  right_side = 1
};
bool SideType_IsValid(int value);
const SideType SideType_MIN = left_side;
const SideType SideType_MAX = right_side;
const int SideType_ARRAYSIZE = SideType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SideType_descriptor();
inline const ::std::string& SideType_Name(SideType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SideType_descriptor(), value);
}
inline bool SideType_Parse(
    const ::std::string& name, SideType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SideType>(
    SideType_descriptor(), name, value);
}
enum ColorType {
  blue_color = 0,
  yellow_color = 1
};
bool ColorType_IsValid(int value);
const ColorType ColorType_MIN = blue_color;
const ColorType ColorType_MAX = yellow_color;
const int ColorType_ARRAYSIZE = ColorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ColorType_descriptor();
inline const ::std::string& ColorType_Name(ColorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ColorType_descriptor(), value);
}
inline bool ColorType_Parse(
    const ::std::string& name, ColorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ColorType>(
    ColorType_descriptor(), name, value);
}
// ===================================================================

class vector_3d : public ::google::protobuf::Message {
 public:
  vector_3d();
  virtual ~vector_3d();
  
  vector_3d(const vector_3d& from);
  
  inline vector_3d& operator=(const vector_3d& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const vector_3d& default_instance();
  
  void Swap(vector_3d* other);
  
  // implements Message ----------------------------------------------
  
  vector_3d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vector_3d& from);
  void MergeFrom(const vector_3d& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float teta = 3;
  inline bool has_teta() const;
  inline void clear_teta();
  static const int kTetaFieldNumber = 3;
  inline float teta() const;
  inline void set_teta(float value);
  
  // @@protoc_insertion_point(class_scope:vector_3d)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_teta();
  inline void clear_has_teta();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float teta_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ssl_5fworld_2eproto();
  friend void protobuf_AssignDesc_ssl_5fworld_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fworld_2eproto();
  
  void InitAsDefaultInstance();
  static vector_3d* default_instance_;
};
// -------------------------------------------------------------------

class ssl_ball : public ::google::protobuf::Message {
 public:
  ssl_ball();
  virtual ~ssl_ball();
  
  ssl_ball(const ssl_ball& from);
  
  inline ssl_ball& operator=(const ssl_ball& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ssl_ball& default_instance();
  
  void Swap(ssl_ball* other);
  
  // implements Message ----------------------------------------------
  
  ssl_ball* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ssl_ball& from);
  void MergeFrom(const ssl_ball& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .vector_3d position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::vector_3d& position() const;
  inline ::vector_3d* mutable_position();
  inline ::vector_3d* release_position();
  
  // required .vector_3d velecity = 3;
  inline bool has_velecity() const;
  inline void clear_velecity();
  static const int kVelecityFieldNumber = 3;
  inline const ::vector_3d& velecity() const;
  inline ::vector_3d* mutable_velecity();
  inline ::vector_3d* release_velecity();
  
  // @@protoc_insertion_point(class_scope:ssl_ball)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velecity();
  inline void clear_has_velecity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::vector_3d* position_;
  ::vector_3d* velecity_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ssl_5fworld_2eproto();
  friend void protobuf_AssignDesc_ssl_5fworld_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fworld_2eproto();
  
  void InitAsDefaultInstance();
  static ssl_ball* default_instance_;
};
// -------------------------------------------------------------------

class ssl_robot : public ::google::protobuf::Message {
 public:
  ssl_robot();
  virtual ~ssl_robot();
  
  ssl_robot(const ssl_robot& from);
  
  inline ssl_robot& operator=(const ssl_robot& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ssl_robot& default_instance();
  
  void Swap(ssl_robot* other);
  
  // implements Message ----------------------------------------------
  
  ssl_robot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ssl_robot& from);
  void MergeFrom(const ssl_robot& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);
  
  // required .vector_3d position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::vector_3d& position() const;
  inline ::vector_3d* mutable_position();
  inline ::vector_3d* release_position();
  
  // required .vector_3d velecity = 3;
  inline bool has_velecity() const;
  inline void clear_velecity();
  static const int kVelecityFieldNumber = 3;
  inline const ::vector_3d& velecity() const;
  inline ::vector_3d* mutable_velecity();
  inline ::vector_3d* release_velecity();
  
  // @@protoc_insertion_point(class_scope:ssl_robot)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velecity();
  inline void clear_has_velecity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::vector_3d* position_;
  ::vector_3d* velecity_;
  ::google::protobuf::uint32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_ssl_5fworld_2eproto();
  friend void protobuf_AssignDesc_ssl_5fworld_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fworld_2eproto();
  
  void InitAsDefaultInstance();
  static ssl_robot* default_instance_;
};
// -------------------------------------------------------------------

class ssl_team : public ::google::protobuf::Message {
 public:
  ssl_team();
  virtual ~ssl_team();
  
  ssl_team(const ssl_team& from);
  
  inline ssl_team& operator=(const ssl_team& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ssl_team& default_instance();
  
  void Swap(ssl_team* other);
  
  // implements Message ----------------------------------------------
  
  ssl_team* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ssl_team& from);
  void MergeFrom(const ssl_team& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ssl_robot robots = 1;
  inline int robots_size() const;
  inline void clear_robots();
  static const int kRobotsFieldNumber = 1;
  inline const ::ssl_robot& robots(int index) const;
  inline ::ssl_robot* mutable_robots(int index);
  inline ::ssl_robot* add_robots();
  inline const ::google::protobuf::RepeatedPtrField< ::ssl_robot >&
      robots() const;
  inline ::google::protobuf::RepeatedPtrField< ::ssl_robot >*
      mutable_robots();
  
  // required .SideType side = 2;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 2;
  inline SideType side() const;
  inline void set_side(SideType value);
  
  // @@protoc_insertion_point(class_scope:ssl_team)
 private:
  inline void set_has_side();
  inline void clear_has_side();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ssl_robot > robots_;
  int side_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_ssl_5fworld_2eproto();
  friend void protobuf_AssignDesc_ssl_5fworld_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fworld_2eproto();
  
  void InitAsDefaultInstance();
  static ssl_team* default_instance_;
};
// -------------------------------------------------------------------

class ssl_world_packet : public ::google::protobuf::Message {
 public:
  ssl_world_packet();
  virtual ~ssl_world_packet();
  
  ssl_world_packet(const ssl_world_packet& from);
  
  inline ssl_world_packet& operator=(const ssl_world_packet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ssl_world_packet& default_instance();
  
  void Swap(ssl_world_packet* other);
  
  // implements Message ----------------------------------------------
  
  ssl_world_packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ssl_world_packet& from);
  void MergeFrom(const ssl_world_packet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ssl_ball field_balls = 1;
  inline int field_balls_size() const;
  inline void clear_field_balls();
  static const int kFieldBallsFieldNumber = 1;
  inline const ::ssl_ball& field_balls(int index) const;
  inline ::ssl_ball* mutable_field_balls(int index);
  inline ::ssl_ball* add_field_balls();
  inline const ::google::protobuf::RepeatedPtrField< ::ssl_ball >&
      field_balls() const;
  inline ::google::protobuf::RepeatedPtrField< ::ssl_ball >*
      mutable_field_balls();
  
  // required .ssl_team blue_team = 2;
  inline bool has_blue_team() const;
  inline void clear_blue_team();
  static const int kBlueTeamFieldNumber = 2;
  inline const ::ssl_team& blue_team() const;
  inline ::ssl_team* mutable_blue_team();
  inline ::ssl_team* release_blue_team();
  
  // required .ssl_team yellow_team = 3;
  inline bool has_yellow_team() const;
  inline void clear_yellow_team();
  static const int kYellowTeamFieldNumber = 3;
  inline const ::ssl_team& yellow_team() const;
  inline ::ssl_team* mutable_yellow_team();
  inline ::ssl_team* release_yellow_team();
  
  // optional string comment = 4;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 4;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  
  // @@protoc_insertion_point(class_scope:ssl_world_packet)
 private:
  inline void set_has_blue_team();
  inline void clear_has_blue_team();
  inline void set_has_yellow_team();
  inline void clear_has_yellow_team();
  inline void set_has_comment();
  inline void clear_has_comment();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ssl_ball > field_balls_;
  ::ssl_team* blue_team_;
  ::ssl_team* yellow_team_;
  ::std::string* comment_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_ssl_5fworld_2eproto();
  friend void protobuf_AssignDesc_ssl_5fworld_2eproto();
  friend void protobuf_ShutdownFile_ssl_5fworld_2eproto();
  
  void InitAsDefaultInstance();
  static ssl_world_packet* default_instance_;
};
// ===================================================================


// ===================================================================

// vector_3d

// required float x = 1;
inline bool vector_3d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vector_3d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vector_3d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vector_3d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float vector_3d::x() const {
  return x_;
}
inline void vector_3d::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool vector_3d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void vector_3d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void vector_3d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void vector_3d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float vector_3d::y() const {
  return y_;
}
inline void vector_3d::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float teta = 3;
inline bool vector_3d::has_teta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void vector_3d::set_has_teta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void vector_3d::clear_has_teta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void vector_3d::clear_teta() {
  teta_ = 0;
  clear_has_teta();
}
inline float vector_3d::teta() const {
  return teta_;
}
inline void vector_3d::set_teta(float value) {
  set_has_teta();
  teta_ = value;
}

// -------------------------------------------------------------------

// ssl_ball

// required uint32 id = 1;
inline bool ssl_ball::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ssl_ball::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ssl_ball::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ssl_ball::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ssl_ball::id() const {
  return id_;
}
inline void ssl_ball::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .vector_3d position = 2;
inline bool ssl_ball::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ssl_ball::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ssl_ball::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ssl_ball::clear_position() {
  if (position_ != NULL) position_->::vector_3d::Clear();
  clear_has_position();
}
inline const ::vector_3d& ssl_ball::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::vector_3d* ssl_ball::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::vector_3d;
  return position_;
}
inline ::vector_3d* ssl_ball::release_position() {
  clear_has_position();
  ::vector_3d* temp = position_;
  position_ = NULL;
  return temp;
}

// required .vector_3d velecity = 3;
inline bool ssl_ball::has_velecity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ssl_ball::set_has_velecity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ssl_ball::clear_has_velecity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ssl_ball::clear_velecity() {
  if (velecity_ != NULL) velecity_->::vector_3d::Clear();
  clear_has_velecity();
}
inline const ::vector_3d& ssl_ball::velecity() const {
  return velecity_ != NULL ? *velecity_ : *default_instance_->velecity_;
}
inline ::vector_3d* ssl_ball::mutable_velecity() {
  set_has_velecity();
  if (velecity_ == NULL) velecity_ = new ::vector_3d;
  return velecity_;
}
inline ::vector_3d* ssl_ball::release_velecity() {
  clear_has_velecity();
  ::vector_3d* temp = velecity_;
  velecity_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ssl_robot

// required uint32 id = 1;
inline bool ssl_robot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ssl_robot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ssl_robot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ssl_robot::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ssl_robot::id() const {
  return id_;
}
inline void ssl_robot::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required .vector_3d position = 2;
inline bool ssl_robot::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ssl_robot::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ssl_robot::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ssl_robot::clear_position() {
  if (position_ != NULL) position_->::vector_3d::Clear();
  clear_has_position();
}
inline const ::vector_3d& ssl_robot::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::vector_3d* ssl_robot::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::vector_3d;
  return position_;
}
inline ::vector_3d* ssl_robot::release_position() {
  clear_has_position();
  ::vector_3d* temp = position_;
  position_ = NULL;
  return temp;
}

// required .vector_3d velecity = 3;
inline bool ssl_robot::has_velecity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ssl_robot::set_has_velecity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ssl_robot::clear_has_velecity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ssl_robot::clear_velecity() {
  if (velecity_ != NULL) velecity_->::vector_3d::Clear();
  clear_has_velecity();
}
inline const ::vector_3d& ssl_robot::velecity() const {
  return velecity_ != NULL ? *velecity_ : *default_instance_->velecity_;
}
inline ::vector_3d* ssl_robot::mutable_velecity() {
  set_has_velecity();
  if (velecity_ == NULL) velecity_ = new ::vector_3d;
  return velecity_;
}
inline ::vector_3d* ssl_robot::release_velecity() {
  clear_has_velecity();
  ::vector_3d* temp = velecity_;
  velecity_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ssl_team

// repeated .ssl_robot robots = 1;
inline int ssl_team::robots_size() const {
  return robots_.size();
}
inline void ssl_team::clear_robots() {
  robots_.Clear();
}
inline const ::ssl_robot& ssl_team::robots(int index) const {
  return robots_.Get(index);
}
inline ::ssl_robot* ssl_team::mutable_robots(int index) {
  return robots_.Mutable(index);
}
inline ::ssl_robot* ssl_team::add_robots() {
  return robots_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_robot >&
ssl_team::robots() const {
  return robots_;
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_robot >*
ssl_team::mutable_robots() {
  return &robots_;
}

// required .SideType side = 2;
inline bool ssl_team::has_side() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ssl_team::set_has_side() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ssl_team::clear_has_side() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ssl_team::clear_side() {
  side_ = 0;
  clear_has_side();
}
inline SideType ssl_team::side() const {
  return static_cast< SideType >(side_);
}
inline void ssl_team::set_side(SideType value) {
  GOOGLE_DCHECK(SideType_IsValid(value));
  set_has_side();
  side_ = value;
}

// -------------------------------------------------------------------

// ssl_world_packet

// repeated .ssl_ball field_balls = 1;
inline int ssl_world_packet::field_balls_size() const {
  return field_balls_.size();
}
inline void ssl_world_packet::clear_field_balls() {
  field_balls_.Clear();
}
inline const ::ssl_ball& ssl_world_packet::field_balls(int index) const {
  return field_balls_.Get(index);
}
inline ::ssl_ball* ssl_world_packet::mutable_field_balls(int index) {
  return field_balls_.Mutable(index);
}
inline ::ssl_ball* ssl_world_packet::add_field_balls() {
  return field_balls_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ssl_ball >&
ssl_world_packet::field_balls() const {
  return field_balls_;
}
inline ::google::protobuf::RepeatedPtrField< ::ssl_ball >*
ssl_world_packet::mutable_field_balls() {
  return &field_balls_;
}

// required .ssl_team blue_team = 2;
inline bool ssl_world_packet::has_blue_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ssl_world_packet::set_has_blue_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ssl_world_packet::clear_has_blue_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ssl_world_packet::clear_blue_team() {
  if (blue_team_ != NULL) blue_team_->::ssl_team::Clear();
  clear_has_blue_team();
}
inline const ::ssl_team& ssl_world_packet::blue_team() const {
  return blue_team_ != NULL ? *blue_team_ : *default_instance_->blue_team_;
}
inline ::ssl_team* ssl_world_packet::mutable_blue_team() {
  set_has_blue_team();
  if (blue_team_ == NULL) blue_team_ = new ::ssl_team;
  return blue_team_;
}
inline ::ssl_team* ssl_world_packet::release_blue_team() {
  clear_has_blue_team();
  ::ssl_team* temp = blue_team_;
  blue_team_ = NULL;
  return temp;
}

// required .ssl_team yellow_team = 3;
inline bool ssl_world_packet::has_yellow_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ssl_world_packet::set_has_yellow_team() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ssl_world_packet::clear_has_yellow_team() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ssl_world_packet::clear_yellow_team() {
  if (yellow_team_ != NULL) yellow_team_->::ssl_team::Clear();
  clear_has_yellow_team();
}
inline const ::ssl_team& ssl_world_packet::yellow_team() const {
  return yellow_team_ != NULL ? *yellow_team_ : *default_instance_->yellow_team_;
}
inline ::ssl_team* ssl_world_packet::mutable_yellow_team() {
  set_has_yellow_team();
  if (yellow_team_ == NULL) yellow_team_ = new ::ssl_team;
  return yellow_team_;
}
inline ::ssl_team* ssl_world_packet::release_yellow_team() {
  clear_has_yellow_team();
  ::ssl_team* temp = yellow_team_;
  yellow_team_ = NULL;
  return temp;
}

// optional string comment = 4;
inline bool ssl_world_packet::has_comment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ssl_world_packet::set_has_comment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ssl_world_packet::clear_has_comment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ssl_world_packet::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& ssl_world_packet::comment() const {
  return *comment_;
}
inline void ssl_world_packet::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void ssl_world_packet::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void ssl_world_packet::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ssl_world_packet::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* ssl_world_packet::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< SideType>() {
  return SideType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ColorType>() {
  return ColorType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ssl_5fworld_2eproto__INCLUDED
